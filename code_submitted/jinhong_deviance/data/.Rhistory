numeric_data <- as.matrix(sample_1)
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 3,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 1,     # Minimum module size
reassignThreshold = 0,  # Merge similar modules
mergeCutHeight = 0.25,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
dissimilarity_matrix <- 1 - network_data$TOM
dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1)
dissTOM[1:10,1:10]
TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
estimate_mean_1 <- colMeans(sample_1)
centered_sample_1 <- as.matrix(sweep(sample_1, 2, estimate_mean_1))
estimate_pc <- irlba(centered_sample_1, nv = 3)$v
plot(estimate_pc[,3])
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 6,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 1,     # Minimum module size
reassignThreshold = 0,  # Merge similar modules
mergeCutHeight = 0.25,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
dissimilarity_matrix <- 1 - network_data$TOM
dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1)
dissTOM[1:10,1:10]
TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
estimate_mean_1 <- colMeans(sample_1)
centered_sample_1 <- as.matrix(sweep(sample_1, 2, estimate_mean_1))
estimate_pc <- irlba(centered_sample_1, nv = 3)$v
plot(estimate_pc[,3])
plot(estimate_pc[,2])
plot(estimate_pc[,2])
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 10,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 1,     # Minimum module size
reassignThreshold = 0,  # Merge similar modules
mergeCutHeight = 0.25,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
dissimilarity_matrix <- 1 - network_data$TOM
dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1)
dissTOM[1:10,1:10]
TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 5,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 1,     # Minimum module size
reassignThreshold = 0,  # Merge similar modules
mergeCutHeight = 0.25,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
dissimilarity_matrix <- 1 - network_data$TOM
dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1)
dissTOM[1:10,1:10]
TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
library(WGCNA)
set.seed(123)
sample_size <- 300
sample_size_1 <- sample_size
sample_size_2 <- sample_size_1
number_feature <- 300
mean_nonzero_number_feature <- 8
pc_nonzero_number_feature <- 8
noise_variance <- 1
true_mean_1 <- matrix(c(rep(1, floor(mean_nonzero_number_feature/2)),
rep(1, ceiling(mean_nonzero_number_feature/2)),
rep(0.1, floor(mean_nonzero_number_feature)),
rep(0, number_feature - 2*mean_nonzero_number_feature)),
ncol = 1)
true_mean_2 <- matrix(c(rep(1.2, floor(mean_nonzero_number_feature/2)),
rep(1.2, ceiling(mean_nonzero_number_feature/2)),
rep(0, number_feature - mean_nonzero_number_feature)),
ncol = 1)
pc1 <- c(rep(1, floor(pc_nonzero_number_feature/2)),
rep(-1, ceiling(pc_nonzero_number_feature/2)),
rep(0, number_feature - pc_nonzero_number_feature))
pc1 <- pc1/norm(pc1, type = '2')
pc2 <- c(rep(0, pc_nonzero_number_feature),
rep(1, pc_nonzero_number_feature),
rep(0, number_feature - 2 * pc_nonzero_number_feature ))
pc2 <- pc2/norm(pc2, type = '2')
pc3 <- c(rep(0, pc_nonzero_number_feature * 2),
rep(1, pc_nonzero_number_feature),
rep(0, number_feature - 3 * pc_nonzero_number_feature ))
pc3 <- pc3/norm(pc3, type = '2')
simulation_covariance <- 15*pc1 %*% t(pc1) + 10* pc2 %*% t(pc2) + 10*pc3 %*% t(pc3)
simulation_covariance <- simulation_covariance + diag(noise_variance, nrow(simulation_covariance))
sample_1 <- data.frame(mvrnorm(sample_size_1,
mu = true_mean_1,
Sigma = simulation_covariance))
sample_2 <- data.frame(mvrnorm(sample_size_2,
mu = true_mean_2,
Sigma = simulation_covariance))
numeric_data <- as.matrix(sample_1)
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 5,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 1,     # Minimum module size
reassignThreshold = 0,  # Merge similar modules
mergeCutHeight = 0.25,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
dissimilarity_matrix <- 1 - network_data$TOM
dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1)
dissTOM[1:10,1:10]
TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
estimate_mean_1 <- colMeans(sample_1)
centered_sample_1 <- as.matrix(sweep(sample_1, 2, estimate_mean_1))
estimate_pc <- irlba(centered_sample_1, nv = 3)$v
plot(estimate_pc[,2])
simulation_correlation <- from_covariance_to_correlation(simulation_covariance)
simulation_covariance <- simulation_correlation
sample_1 <- data.frame(mvrnorm(sample_size_1,
mu = true_mean_1,
Sigma = simulation_covariance))
library(WGCNA)
set.seed(123)
sample_size <- 300
sample_size_1 <- sample_size
sample_size_2 <- sample_size_1
number_feature <- 300
mean_nonzero_number_feature <- 8
pc_nonzero_number_feature <- 8
noise_variance <- 1
true_mean_1 <- matrix(c(rep(1, floor(mean_nonzero_number_feature/2)),
rep(1, ceiling(mean_nonzero_number_feature/2)),
rep(0.1, floor(mean_nonzero_number_feature)),
rep(0, number_feature - 2*mean_nonzero_number_feature)),
ncol = 1)
true_mean_2 <- matrix(c(rep(1.2, floor(mean_nonzero_number_feature/2)),
rep(1.2, ceiling(mean_nonzero_number_feature/2)),
rep(0, number_feature - mean_nonzero_number_feature)),
ncol = 1)
pc1 <- c(rep(1, floor(pc_nonzero_number_feature/2)),
rep(-1, ceiling(pc_nonzero_number_feature/2)),
rep(0, number_feature - pc_nonzero_number_feature))
pc1 <- pc1/norm(pc1, type = '2')
pc2 <- c(rep(0, pc_nonzero_number_feature),
rep(1, pc_nonzero_number_feature),
rep(0, number_feature - 2 * pc_nonzero_number_feature ))
pc2 <- pc2/norm(pc2, type = '2')
pc3 <- c(rep(0, pc_nonzero_number_feature * 2),
rep(1, pc_nonzero_number_feature),
rep(0, number_feature - 3 * pc_nonzero_number_feature ))
pc3 <- pc3/norm(pc3, type = '2')
simulation_covariance <- 15*pc1 %*% t(pc1) + 10* pc2 %*% t(pc2) + 10*pc3 %*% t(pc3)
simulation_covariance <- simulation_covariance + diag(noise_variance, nrow(simulation_covariance))
simulation_correlation <- from_covariance_to_correlation(simulation_covariance)
simulation_covariance <- simulation_correlation
sample_1 <- data.frame(mvrnorm(sample_size_1,
mu = true_mean_1,
Sigma = simulation_covariance))
sample_2 <- data.frame(mvrnorm(sample_size_2,
mu = true_mean_2,
Sigma = simulation_covariance))
numeric_data <- as.matrix(sample_1)
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 5,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 1,     # Minimum module size
reassignThreshold = 0,  # Merge similar modules
mergeCutHeight = 0.25,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
dissimilarity_matrix <- 1 - network_data$TOM
dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1)
dissTOM[1:10,1:10]
TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
estimate_mean_1 <- colMeans(sample_1)
centered_sample_1 <- as.matrix(sweep(sample_1, 2, estimate_mean_1))
estimate_pc <- irlba(centered_sample_1, nv = 3)$v
plot(estimate_pc[,2])
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 5,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 5,     # Minimum module size
reassignThreshold = 0,  # Merge similar modules
mergeCutHeight = 0.25,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
dissimilarity_matrix <- 1 - network_data$TOM
dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1)
dissTOM[1:10,1:10]
TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
estimate_mean_1 <- colMeans(sample_1)
centered_sample_1 <- as.matrix(sweep(sample_1, 2, estimate_mean_1))
estimate_pc <- irlba(centered_sample_1, nv = 3)$v
plot(estimate_pc[,2])
plot(estimate_pc[,3])
plot(estimate_pc[,3])
estimate_pc[1:24,3]
estimate_pc[1:30,3]
cv_result <- SPC.cv(centered_sample_1)
estimate_leading_pc <- SPC(centered_sample_1,
K = 3,
sumabsv = cv_result$bestsumabsv)$v
plot(estimate_pc[,3])
estimate_pc[1:30,3]
plot(estimate_pc[,3])
plot(estimate_leading_pc[,3])
plot(estimate_leading_pc[,3])
library(WGCNA)
set.seed(123)
sample_size <- 300
sample_size_1 <- sample_size
sample_size_2 <- sample_size_1
number_feature <- 300
mean_nonzero_number_feature <- 8
pc_nonzero_number_feature <- 8
noise_variance <- 1
true_mean_1 <- matrix(c(rep(1, floor(mean_nonzero_number_feature/2)),
rep(1, ceiling(mean_nonzero_number_feature/2)),
rep(0.1, floor(mean_nonzero_number_feature)),
rep(0, number_feature - 2*mean_nonzero_number_feature)),
ncol = 1)
true_mean_2 <- matrix(c(rep(1.2, floor(mean_nonzero_number_feature/2)),
rep(1.2, ceiling(mean_nonzero_number_feature/2)),
rep(0, number_feature - mean_nonzero_number_feature)),
ncol = 1)
pc1 <- c(rep(1, floor(pc_nonzero_number_feature/2)),
rep(-1, ceiling(pc_nonzero_number_feature/2)),
rep(0, number_feature - pc_nonzero_number_feature))
pc1 <- pc1/norm(pc1, type = '2')
pc2 <- c(rep(0, pc_nonzero_number_feature),
rep(1, pc_nonzero_number_feature),
rep(0, number_feature - 2 * pc_nonzero_number_feature ))
pc2 <- pc2/norm(pc2, type = '2')
pc3 <- c(rep(0, pc_nonzero_number_feature * 2),
rep(1, pc_nonzero_number_feature),
rep(0, number_feature - 3 * pc_nonzero_number_feature ))
pc3 <- pc3/norm(pc3, type = '2')
simulation_covariance <- 15*pc1 %*% t(pc1) + 10* pc2 %*% t(pc2) + 2*pc3 %*% t(pc3)
simulation_covariance <- simulation_covariance + diag(noise_variance, nrow(simulation_covariance))
simulation_correlation <- from_covariance_to_correlation(simulation_covariance)
simulation_covariance <- simulation_correlation
sample_1 <- data.frame(mvrnorm(sample_size_1,
mu = true_mean_1,
Sigma = simulation_covariance))
sample_2 <- data.frame(mvrnorm(sample_size_2,
mu = true_mean_2,
Sigma = simulation_covariance))
numeric_data <- as.matrix(sample_1)
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 5,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 5,     # Minimum module size
reassignThreshold = 0,  # Merge similar modules
mergeCutHeight = 0.25,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
dissimilarity_matrix <- 1 - network_data$TOM
dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1)
dissTOM[1:10,1:10]
TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
estimate_mean_1 <- colMeans(sample_1)
centered_sample_1 <- as.matrix(sweep(sample_1, 2, estimate_mean_1))
estimate_pc <- irlba(centered_sample_1, nv = 3)$v
cv_result <- SPC.cv(centered_sample_1)
estimate_leading_pc <- SPC(centered_sample_1,
K = 3,
sumabsv = cv_result$bestsumabsv)$v
plot(estimate_leading_pc[,3])
estimate_pc[1:30,3]
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 2,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 5,     # Minimum module size
reassignThreshold = 0,  # Merge similar modules
mergeCutHeight = 0.25,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
dissimilarity_matrix <- 1 - network_data$TOM
dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1)
dissTOM[1:10,1:10]
TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
centered_sample_1 <- as.matrix(sweep(sample_1, 2, estimate_mean_1))
estimate_pc <- irlba(centered_sample_1, nv = 3)$v
cv_result <- SPC.cv(centered_sample_1)
estimate_leading_pc <- SPC(centered_sample_1,
K = 3,
sumabsv = cv_result$bestsumabsv)$v
plot(estimate_leading_pc[,3])
estimate_pc[1:30,3]
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 1,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 5,     # Minimum module size
reassignThreshold = 0,  # Merge similar modules
mergeCutHeight = 0.25,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
dissimilarity_matrix <- 1 - network_data$TOM
dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1)
dissTOM[1:10,1:10]
TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 1,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 5,     # Minimum module size
reassignThreshold = 0.1,  # Merge similar modules
mergeCutHeight = 0.25,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
dissimilarity_matrix <- 1 - network_data$TOM
dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1)
dissTOM[1:10,1:10]
TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
?blockwiseModules
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 1,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 5,     # Minimum module size
reassignThreshold = 0.1,  # Merge similar modules
mergeCutHeight = 0,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
dissimilarity_matrix <- 1 - network_data$TOM
dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1)
dissTOM[1:10,1:10]
TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
TOMplot(dissTOM, dendro = network_data$dendrograms)
dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1, TOMType = 'signed')
dissTOM[1:10,1:10]
TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
estimate_mean_1 <- colMeans(sample_1)
centered_sample_1 <- as.matrix(sweep(sample_1, 2, estimate_mean_1))
estimate_pc <- irlba(centered_sample_1, nv = 3)$v
cv_result <- SPC.cv(centered_sample_1)
estimate_leading_pc <- SPC(centered_sample_1,
K = 3,
sumabsv = cv_result$bestsumabsv)$v
plot(estimate_leading_pc[,3])
estimate_pc[1:30,3]
plot(estimate_leading_pc[,3])
plot(estimate_leading_pc[,3])
estimate_leading_pc <- SPC(centered_sample_1,
K = 3,
sumabsv = cv_result$bestsumabsv * log(nrow(centered_sample_1)))$v
plot(estimate_leading_pc[,3])
estimate_pc[1:30,3]
plot(estimate_leading_pc[,3])
estimate_leading_pc <- SPC(centered_sample_1,
K = 3,
sumabsv = cv_result$bestsumabsv /log(nrow(centered_sample_1)))$v
estimate_leading_pc <- SPC(centered_sample_1,
K = 3,
sumabsv = cv_result$bestsumabsv /log(nrow(centered_sample_1)))$v
plot(estimate_leading_pc[,3])
estimate_pc[1:30,3]
plot(estimate_leading_pc[,3])
estimate_leading_pc <- SPC(centered_sample_1,
K = 3,
sumabsv = cv_result$bestsumabsv /log(nrow(centered_sample_1)))$v
plot(estimate_leading_pc[,3])
estimate_leading_pc <- SPC(centered_sample_1,
K = 3,
sumabsv = cv_result$bestsumabsv /log(nrow(centered_sample_1)))$v
estimate_leading_pc <- SPC(centered_sample_1,
K = 3,
sumabsv = cv_result$bestsumabsv)$v
plot(estimate_leading_pc[,3])
estimate_pc[1:30,3]
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 2,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 5,     # Minimum module size
reassignThreshold = 0.1,  # Merge similar modules
mergeCutHeight = 0,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 3,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 5,     # Minimum module size
reassignThreshold = 0.1,  # Merge similar modules
mergeCutHeight = 0,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
library(WGCNA)
set.seed(123)
sample_size <- 300
sample_size_1 <- sample_size
sample_size_2 <- sample_size_1
number_feature <- 300
mean_nonzero_number_feature <- 8
pc_nonzero_number_feature <- 8
noise_variance <- 1
true_mean_1 <- matrix(c(rep(1, floor(mean_nonzero_number_feature/2)),
rep(1, ceiling(mean_nonzero_number_feature/2)),
rep(0.1, floor(mean_nonzero_number_feature)),
rep(0, number_feature - 2*mean_nonzero_number_feature)),
ncol = 1)
true_mean_2 <- matrix(c(rep(1.2, floor(mean_nonzero_number_feature/2)),
rep(1.2, ceiling(mean_nonzero_number_feature/2)),
rep(0, number_feature - mean_nonzero_number_feature)),
ncol = 1)
pc1 <- c(rep(1, floor(pc_nonzero_number_feature/2)),
rep(-1, ceiling(pc_nonzero_number_feature/2)),
rep(0, number_feature - pc_nonzero_number_feature))
pc1 <- pc1/norm(pc1, type = '2')
pc2 <- c(rep(0, pc_nonzero_number_feature-4),
rep(1, pc_nonzero_number_feature),
rep(0, number_feature - 2 * pc_nonzero_number_feature + 4 ))
pc2 <- pc2/norm(pc2, type = '2')
pc3 <- c(rep(0, pc_nonzero_number_feature * 2),
rep(1, pc_nonzero_number_feature),
rep(0, number_feature - 3 * pc_nonzero_number_feature ))
pc3 <- pc3/norm(pc3, type = '2')
simulation_covariance <- 15*pc1 %*% t(pc1) + 10* pc2 %*% t(pc2) + 2*pc3 %*% t(pc3)
simulation_covariance <- simulation_covariance + diag(noise_variance, nrow(simulation_covariance))
simulation_correlation <- from_covariance_to_correlation(simulation_covariance)
simulation_covariance <- simulation_correlation
sample_1 <- data.frame(mvrnorm(sample_size_1,
mu = true_mean_1,
Sigma = simulation_covariance))
sample_2 <- data.frame(mvrnorm(sample_size_2,
mu = true_mean_2,
Sigma = simulation_covariance))
numeric_data <- as.matrix(sample_1)
# Create a weighted network
network_data <- blockwiseModules(
datExpr = numeric_data,
power = 3,              # Soft-thresholding power
TOMType = "signed",   # Type of Topological Overlap Matrix
minModuleSize = 5,     # Minimum module size
reassignThreshold = 0.1,  # Merge similar modules
mergeCutHeight = 0,   # Cut height for module merging
pamRespectsDendro = FALSE,
verbose = 3             # Print progress
)
# dissimilarity_matrix <- 1 - network_data$TOM
# dissTOM <-  TOMsimilarityFromExpr (numeric_data, power  = 1, TOMType = 'signed')
# dissTOM[1:10,1:10]
# TOMplot(dissTOM, dendro = network_data$dendrograms)
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
estimate_mean_1 <- colMeans(sample_1)
centered_sample_1 <- as.matrix(sweep(sample_1, 2, estimate_mean_1))
estimate_pc <- irlba(centered_sample_1, nv = 3)$v
cv_result <- SPC.cv(centered_sample_1)
estimate_leading_pc <- SPC(centered_sample_1,
K = 3,
sumabsv = cv_result$bestsumabsv)$v
plot(estimate_leading_pc[,3])
estimate_pc[1:30,3]
plot(estimate_leading_pc[,2])
estimate_pc[1:30,3]
plot(estimate_leading_pc[,2])
plot(estimate_leading_pc[,1])
plotDendroAndColors(network_data$dendrograms[[1]], network_data$colors)
