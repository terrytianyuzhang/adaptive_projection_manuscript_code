# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
# Load libraries
library(MASS)
library(Matrix)
library(Seurat)
# Set up
n_samples <- 2000
n_features <- 100
# Define correlation structure
block_sizes <- c(17, 34)
uncorrelated_size <- n_features - sum(block_sizes)
blocks <- lapply(block_sizes, function(size) {
mat <- matrix(0.8, nrow = size, ncol = size)
diag(mat) <- 1
mat
})
uncorrelated_block <- diag(uncorrelated_size)
Sigma <- as.matrix(do.call(bdiag, c(blocks, list(uncorrelated_block))))
mu <- rep(1, n_features)  # ensure positivity
# Sample latent Gaussian matrix Z ~ N(mu, Sigma)
Z <- mvrnorm(n = n_samples, mu = mu, Sigma = Sigma)
# Generate size factors s_i for each sample
size_factors <- runif(n_samples, min = 1, max = 7)
# Generate X_ij ~ Poisson(s_i * z_ij), ensure positivity in Z
Z_pos <- pmax(Z, 0)  # optional: truncate negative z_ij to 0
X_counts <- matrix(0, nrow = n_samples, ncol = n_features)
for (i in 1:n_samples) {
X_counts[i, ] <- rpois(n_features, lambda = size_factors[i] * Z_pos[i, ])
# X_counts[i, ] <- size_factors[i] * Z_pos[i, ]
# X_counts[i, ] <- rnorm(n_features, mean = size_factors[i] * Z_pos[i, ], sd = sqrt(size_factors[i] * Z_pos[i, ]))
}
# Annotate and wrap into Seurat object
rownames(X_counts) <- paste0("Cell", 1:n_samples)
colnames(X_counts) <- paste0("Gene", 1:n_features)
seurat_obj <- CreateSeuratObject(counts = t(X_counts))  # Seurat expects genes x cells
# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
# Load libraries
library(MASS)
library(Matrix)
library(Seurat)
# Set up
n_samples <- 2000
n_features <- 100
# Define correlation structure
block_sizes <- c(17, 34)
uncorrelated_size <- n_features - sum(block_sizes)
blocks <- lapply(block_sizes, function(size) {
mat <- matrix(0.8, nrow = size, ncol = size)
diag(mat) <- 1
mat
})
uncorrelated_block <- diag(uncorrelated_size)
Sigma <- as.matrix(do.call(bdiag, c(blocks, list(uncorrelated_block))))
mu <- rep(1, n_features)  # ensure positivity
# Sample latent Gaussian matrix Z ~ N(mu, Sigma)
Z <- mvrnorm(n = n_samples, mu = mu, Sigma = Sigma)
# Generate size factors s_i for each sample
size_factors <- runif(n_samples, min = 1, max = 7)
# Generate X_ij ~ Poisson(s_i * z_ij), ensure positivity in Z
Z_pos <- pmax(Z, 0)  # optional: truncate negative z_ij to 0
X_counts <- matrix(0, nrow = n_samples, ncol = n_features)
for (i in 1:n_samples) {
X_counts[i, ] <- rpois(n_features, lambda = size_factors[i] * Z_pos[i, ])
# X_counts[i, ] <- size_factors[i] * Z_pos[i, ]
# X_counts[i, ] <- rnorm(n_features, mean = size_factors[i] * Z_pos[i, ], sd = sqrt(size_factors[i] * Z_pos[i, ]))
}
# Annotate and wrap into Seurat object
rownames(X_counts) <- paste0("Cell", 1:n_samples)
colnames(X_counts) <- paste0("Gene", 1:n_features)
seurat_obj <- CreateSeuratObject(counts = t(X_counts))  # Seurat expects genes x cells
# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
# Load libraries
library(MASS)
library(Matrix)
library(Seurat)
# Set up
n_samples <- 2000
n_features <- 100
# Define correlation structure
block_sizes <- c(17, 34)
uncorrelated_size <- n_features - sum(block_sizes)
blocks <- lapply(block_sizes, function(size) {
mat <- matrix(0.8, nrow = size, ncol = size)
diag(mat) <- 1
mat
})
uncorrelated_block <- diag(uncorrelated_size)
Sigma <- as.matrix(do.call(bdiag, c(blocks, list(uncorrelated_block))))
mu <- rep(1, n_features)  # ensure positivity
# Sample latent Gaussian matrix Z ~ N(mu, Sigma)
Z <- mvrnorm(n = n_samples, mu = mu, Sigma = Sigma)
# Generate size factors s_i for each sample
size_factors <- runif(n_samples, min = 1, max = 1)
# Generate X_ij ~ Poisson(s_i * z_ij), ensure positivity in Z
Z_pos <- pmax(Z, 0)  # optional: truncate negative z_ij to 0
X_counts <- matrix(0, nrow = n_samples, ncol = n_features)
for (i in 1:n_samples) {
X_counts[i, ] <- rpois(n_features, lambda = size_factors[i] * Z_pos[i, ])
# X_counts[i, ] <- size_factors[i] * Z_pos[i, ]
# X_counts[i, ] <- rnorm(n_features, mean = size_factors[i] * Z_pos[i, ], sd = sqrt(size_factors[i] * Z_pos[i, ]))
}
# Annotate and wrap into Seurat object
rownames(X_counts) <- paste0("Cell", 1:n_samples)
colnames(X_counts) <- paste0("Gene", 1:n_features)
seurat_obj <- CreateSeuratObject(counts = t(X_counts))  # Seurat expects genes x cells
# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
# Load libraries
library(MASS)
library(Matrix)
library(Seurat)
# Set up
n_samples <- 2000
n_features <- 100
# Define correlation structure
block_sizes <- c(17, 34)
uncorrelated_size <- n_features - sum(block_sizes)
blocks <- lapply(block_sizes, function(size) {
mat <- matrix(0.8, nrow = size, ncol = size)
diag(mat) <- 1
mat
})
uncorrelated_block <- diag(uncorrelated_size)
Sigma <- as.matrix(do.call(bdiag, c(blocks, list(uncorrelated_block))))
mu <- rep(1, n_features)  # ensure positivity
# Sample latent Gaussian matrix Z ~ N(mu, Sigma)
Z <- mvrnorm(n = n_samples, mu = mu, Sigma = Sigma)
# Generate size factors s_i for each sample
size_factors <- runif(n_samples, min = 1, max = 1)
# Generate X_ij ~ Poisson(s_i * z_ij), ensure positivity in Z
Z_pos <- pmax(Z, 0)  # optional: truncate negative z_ij to 0
X_counts <- matrix(0, nrow = n_samples, ncol = n_features)
for (i in 1:n_samples) {
X_counts[i, ] <- rpois(n_features, lambda = size_factors[i] * Z_pos[i, ])
# X_counts[i, ] <- size_factors[i] * Z_pos[i, ]
# X_counts[i, ] <- rnorm(n_features, mean = size_factors[i] * Z_pos[i, ], sd = sqrt(size_factors[i] * Z_pos[i, ]))
}
# Annotate and wrap into Seurat object
rownames(X_counts) <- paste0("Cell", 1:n_samples)
colnames(X_counts) <- paste0("Gene", 1:n_features)
seurat_obj <- CreateSeuratObject(counts = t(X_counts))  # Seurat expects genes x cells
# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
# Load libraries
library(MASS)
library(Matrix)
library(Seurat)
# Set up
n_samples <- 2000
n_features <- 100
# Define correlation structure
block_sizes <- c(17, 34)
uncorrelated_size <- n_features - sum(block_sizes)
blocks <- lapply(block_sizes, function(size) {
mat <- matrix(0.8, nrow = size, ncol = size)
diag(mat) <- 1
mat
})
uncorrelated_block <- diag(uncorrelated_size)
Sigma <- as.matrix(do.call(bdiag, c(blocks, list(uncorrelated_block))))
mu <- rep(1, n_features)  # ensure positivity
# Sample latent Gaussian matrix Z ~ N(mu, Sigma)
Z <- mvrnorm(n = n_samples, mu = mu, Sigma = Sigma)
# Generate size factors s_i for each sample
size_factors <- runif(n_samples, min = 1, max = 1)
# Generate X_ij ~ Poisson(s_i * z_ij), ensure positivity in Z
Z_pos <- pmax(Z, 0)  # optional: truncate negative z_ij to 0
X_counts <- matrix(0, nrow = n_samples, ncol = n_features)
for (i in 1:n_samples) {
X_counts[i, ] <- rpois(n_features, lambda = size_factors[i] * Z_pos[i, ])
# X_counts[i, ] <- size_factors[i] * Z_pos[i, ]
# X_counts[i, ] <- rnorm(n_features, mean = size_factors[i] * Z_pos[i, ], sd = sqrt(size_factors[i] * Z_pos[i, ]))
}
# Annotate and wrap into Seurat object
rownames(X_counts) <- paste0("Cell", 1:n_samples)
colnames(X_counts) <- paste0("Gene", 1:n_features)
seurat_obj <- CreateSeuratObject(counts = t(X_counts))  # Seurat expects genes x cells
# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
# Load libraries
library(MASS)
library(Matrix)
library(Seurat)
# Set up
n_samples <- 2000
n_features <- 100
# Define correlation structure
block_sizes <- c(17, 34)
uncorrelated_size <- n_features - sum(block_sizes)
blocks <- lapply(block_sizes, function(size) {
mat <- matrix(0.8, nrow = size, ncol = size)
diag(mat) <- 1
mat
})
uncorrelated_block <- diag(uncorrelated_size)
Sigma <- as.matrix(do.call(bdiag, c(blocks, list(uncorrelated_block))))
mu <- rep(1, n_features)  # ensure positivity
# Sample latent Gaussian matrix Z ~ N(mu, Sigma)
Z <- mvrnorm(n = n_samples, mu = mu, Sigma = Sigma)
# Generate size factors s_i for each sample
size_factors <- runif(n_samples, min = 1, max = 2)
# Generate X_ij ~ Poisson(s_i * z_ij), ensure positivity in Z
Z_pos <- pmax(Z, 0)  # optional: truncate negative z_ij to 0
X_counts <- matrix(0, nrow = n_samples, ncol = n_features)
for (i in 1:n_samples) {
X_counts[i, ] <- rpois(n_features, lambda = size_factors[i] * Z_pos[i, ])
# X_counts[i, ] <- size_factors[i] * Z_pos[i, ]
# X_counts[i, ] <- rnorm(n_features, mean = size_factors[i] * Z_pos[i, ], sd = sqrt(size_factors[i] * Z_pos[i, ]))
}
# Annotate and wrap into Seurat object
rownames(X_counts) <- paste0("Cell", 1:n_samples)
colnames(X_counts) <- paste0("Gene", 1:n_features)
seurat_obj <- CreateSeuratObject(counts = t(X_counts))  # Seurat expects genes x cells
# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
# Load libraries
library(MASS)
library(Matrix)
library(Seurat)
# Set up
n_samples <- 2000
n_features <- 100
# Define correlation structure
block_sizes <- c(17, 34)
uncorrelated_size <- n_features - sum(block_sizes)
blocks <- lapply(block_sizes, function(size) {
mat <- matrix(0.8, nrow = size, ncol = size)
diag(mat) <- 1
mat
})
uncorrelated_block <- diag(uncorrelated_size)
Sigma <- as.matrix(do.call(bdiag, c(blocks, list(uncorrelated_block))))
mu <- rep(1, n_features)  # ensure positivity
# Sample latent Gaussian matrix Z ~ N(mu, Sigma)
Z <- mvrnorm(n = n_samples, mu = mu, Sigma = Sigma)
# Generate size factors s_i for each sample
size_factors <- runif(n_samples, min = 1, max = 2)
# Generate X_ij ~ Poisson(s_i * z_ij), ensure positivity in Z
Z_pos <- pmax(Z, 0)  # optional: truncate negative z_ij to 0
X_counts <- matrix(0, nrow = n_samples, ncol = n_features)
for (i in 1:n_samples) {
X_counts[i, ] <- rpois(n_features, lambda = size_factors[i] * Z_pos[i, ])
# X_counts[i, ] <- size_factors[i] * Z_pos[i, ]
# X_counts[i, ] <- rnorm(n_features, mean = size_factors[i] * Z_pos[i, ], sd = sqrt(size_factors[i] * Z_pos[i, ]))
}
# Annotate and wrap into Seurat object
rownames(X_counts) <- paste0("Cell", 1:n_samples)
colnames(X_counts) <- paste0("Gene", 1:n_features)
seurat_obj <- CreateSeuratObject(counts = t(X_counts))  # Seurat expects genes x cells
# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
# Load libraries
library(MASS)
library(Matrix)
library(Seurat)
# Set up
n_samples <- 2000
n_features <- 100
# Define correlation structure
block_sizes <- c(17, 34)
uncorrelated_size <- n_features - sum(block_sizes)
blocks <- lapply(block_sizes, function(size) {
mat <- matrix(0.8, nrow = size, ncol = size)
diag(mat) <- 1
mat
})
uncorrelated_block <- diag(uncorrelated_size)
Sigma <- as.matrix(do.call(bdiag, c(blocks, list(uncorrelated_block))))
mu <- rep(1, n_features)  # ensure positivity
# Sample latent Gaussian matrix Z ~ N(mu, Sigma)
Z <- mvrnorm(n = n_samples, mu = mu, Sigma = Sigma)
# Generate size factors s_i for each sample
size_factors <- runif(n_samples, min = 1, max = 10)
# Generate X_ij ~ Poisson(s_i * z_ij), ensure positivity in Z
Z_pos <- pmax(Z, 0)  # optional: truncate negative z_ij to 0
X_counts <- matrix(0, nrow = n_samples, ncol = n_features)
for (i in 1:n_samples) {
X_counts[i, ] <- rpois(n_features, lambda = size_factors[i] * Z_pos[i, ])
# X_counts[i, ] <- size_factors[i] * Z_pos[i, ]
# X_counts[i, ] <- rnorm(n_features, mean = size_factors[i] * Z_pos[i, ], sd = sqrt(size_factors[i] * Z_pos[i, ]))
}
# Annotate and wrap into Seurat object
rownames(X_counts) <- paste0("Cell", 1:n_samples)
colnames(X_counts) <- paste0("Gene", 1:n_features)
seurat_obj <- CreateSeuratObject(counts = t(X_counts))  # Seurat expects genes x cells
# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
# Load libraries
library(MASS)
library(Matrix)
library(Seurat)
# Set up
n_samples <- 2000
n_features <- 100
# Define correlation structure
block_sizes <- c(17, 34)
uncorrelated_size <- n_features - sum(block_sizes)
blocks <- lapply(block_sizes, function(size) {
mat <- matrix(0.8, nrow = size, ncol = size)
diag(mat) <- 1
mat
})
uncorrelated_block <- diag(uncorrelated_size)
Sigma <- as.matrix(do.call(bdiag, c(blocks, list(uncorrelated_block))))
mu <- rep(1, n_features)  # ensure positivity
# Sample latent Gaussian matrix Z ~ N(mu, Sigma)
Z <- mvrnorm(n = n_samples, mu = mu, Sigma = Sigma)
# Generate size factors s_i for each sample
size_factors <- runif(n_samples, min = 1, max = 1)
# Generate X_ij ~ Poisson(s_i * z_ij), ensure positivity in Z
Z_pos <- pmax(Z, 0)  # optional: truncate negative z_ij to 0
X_counts <- matrix(0, nrow = n_samples, ncol = n_features)
for (i in 1:n_samples) {
X_counts[i, ] <- rpois(n_features, lambda = size_factors[i] * Z_pos[i, ])
# X_counts[i, ] <- size_factors[i] * Z_pos[i, ]
# X_counts[i, ] <- rnorm(n_features, mean = size_factors[i] * Z_pos[i, ], sd = sqrt(size_factors[i] * Z_pos[i, ]))
}
# Annotate and wrap into Seurat object
rownames(X_counts) <- paste0("Cell", 1:n_samples)
colnames(X_counts) <- paste0("Gene", 1:n_features)
seurat_obj <- CreateSeuratObject(counts = t(X_counts))  # Seurat expects genes x cells
# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
# Load libraries
library(MASS)
library(Matrix)
library(Seurat)
# Set up
n_samples <- 2000
n_features <- 100
# Define correlation structure
block_sizes <- c(17, 34)
uncorrelated_size <- n_features - sum(block_sizes)
blocks <- lapply(block_sizes, function(size) {
mat <- matrix(0.8, nrow = size, ncol = size)
diag(mat) <- 1
mat
})
uncorrelated_block <- diag(uncorrelated_size)
Sigma <- as.matrix(do.call(bdiag, c(blocks, list(uncorrelated_block))))
mu <- rep(1, n_features)  # ensure positivity
# Sample latent Gaussian matrix Z ~ N(mu, Sigma)
Z <- mvrnorm(n = n_samples, mu = mu, Sigma = Sigma)
# Generate size factors s_i for each sample
size_factors <- runif(n_samples, min = 1, max = 1)
# Generate X_ij ~ Poisson(s_i * z_ij), ensure positivity in Z
Z_pos <- pmax(Z, 0)  # optional: truncate negative z_ij to 0
X_counts <- matrix(0, nrow = n_samples, ncol = n_features)
for (i in 1:n_samples) {
X_counts[i, ] <- rpois(n_features, lambda = size_factors[i] * Z_pos[i, ])
# X_counts[i, ] <- size_factors[i] * Z_pos[i, ]
# X_counts[i, ] <- rnorm(n_features, mean = size_factors[i] * Z_pos[i, ], sd = sqrt(size_factors[i] * Z_pos[i, ]))
}
# Annotate and wrap into Seurat object
rownames(X_counts) <- paste0("Cell", 1:n_samples)
colnames(X_counts) <- paste0("Gene", 1:n_features)
seurat_obj <- CreateSeuratObject(counts = t(X_counts))  # Seurat expects genes x cells
# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
# Load libraries
library(MASS)
library(Matrix)
library(Seurat)
# Set up
n_samples <- 2000
n_features <- 100
# Define correlation structure
block_sizes <- c(17, 34)
uncorrelated_size <- n_features - sum(block_sizes)
blocks <- lapply(block_sizes, function(size) {
mat <- matrix(0.8, nrow = size, ncol = size)
diag(mat) <- 1
mat
})
uncorrelated_block <- diag(uncorrelated_size)
Sigma <- as.matrix(do.call(bdiag, c(blocks, list(uncorrelated_block))))
mu <- rep(1, n_features)  # ensure positivity
# Sample latent Gaussian matrix Z ~ N(mu, Sigma)
Z <- mvrnorm(n = n_samples, mu = mu, Sigma = Sigma)
# Generate size factors s_i for each sample
size_factors <- runif(n_samples, min = 1, max = 1)
# Generate X_ij ~ Poisson(s_i * z_ij), ensure positivity in Z
Z_pos <- pmax(Z, 0)  # optional: truncate negative z_ij to 0
X_counts <- matrix(0, nrow = n_samples, ncol = n_features)
for (i in 1:n_samples) {
X_counts[i, ] <- rpois(n_features, lambda = size_factors[i] * Z_pos[i, ])
# X_counts[i, ] <- size_factors[i] * Z_pos[i, ]
# X_counts[i, ] <- rnorm(n_features, mean = size_factors[i] * Z_pos[i, ], sd = sqrt(size_factors[i] * Z_pos[i, ]))
}
# Annotate and wrap into Seurat object
rownames(X_counts) <- paste0("Cell", 1:n_samples)
colnames(X_counts) <- paste0("Gene", 1:n_features)
seurat_obj <- CreateSeuratObject(counts = t(X_counts))  # Seurat expects genes x cells
# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
# Load libraries
library(MASS)
library(Matrix)
library(Seurat)
# Set up
n_samples <- 2000
n_features <- 1000
# Define correlation structure
block_sizes <- c(17, 34)
uncorrelated_size <- n_features - sum(block_sizes)
blocks <- lapply(block_sizes, function(size) {
mat <- matrix(0.8, nrow = size, ncol = size)
diag(mat) <- 1
mat
})
uncorrelated_block <- diag(uncorrelated_size)
Sigma <- as.matrix(do.call(bdiag, c(blocks, list(uncorrelated_block))))
mu <- rep(1, n_features)  # ensure positivity
# Sample latent Gaussian matrix Z ~ N(mu, Sigma)
Z <- mvrnorm(n = n_samples, mu = mu, Sigma = Sigma)
# Generate size factors s_i for each sample
size_factors <- runif(n_samples, min = 1, max = 1)
# Generate X_ij ~ Poisson(s_i * z_ij), ensure positivity in Z
Z_pos <- pmax(Z, 0)  # optional: truncate negative z_ij to 0
X_counts <- matrix(0, nrow = n_samples, ncol = n_features)
for (i in 1:n_samples) {
X_counts[i, ] <- rpois(n_features, lambda = size_factors[i] * Z_pos[i, ])
# X_counts[i, ] <- size_factors[i] * Z_pos[i, ]
# X_counts[i, ] <- rnorm(n_features, mean = size_factors[i] * Z_pos[i, ], sd = sqrt(size_factors[i] * Z_pos[i, ]))
}
# Annotate and wrap into Seurat object
rownames(X_counts) <- paste0("Cell", 1:n_samples)
colnames(X_counts) <- paste0("Gene", 1:n_features)
seurat_obj <- CreateSeuratObject(counts = t(X_counts))  # Seurat expects genes x cells
# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
# Load libraries
library(MASS)
library(Matrix)
library(Seurat)
# Set up
n_samples <- 2000
n_features <- 1000
# Define correlation structure
block_sizes <- c(17, 34)
uncorrelated_size <- n_features - sum(block_sizes)
blocks <- lapply(block_sizes, function(size) {
mat <- matrix(0.8, nrow = size, ncol = size)
diag(mat) <- 1
mat
})
uncorrelated_block <- diag(uncorrelated_size)
Sigma <- as.matrix(do.call(bdiag, c(blocks, list(uncorrelated_block))))
mu <- rep(1, n_features)  # ensure positivity
# Sample latent Gaussian matrix Z ~ N(mu, Sigma)
Z <- mvrnorm(n = n_samples, mu = mu, Sigma = Sigma)
# Generate size factors s_i for each sample
size_factors <- runif(n_samples, min = 1, max = 100)
# Generate X_ij ~ Poisson(s_i * z_ij), ensure positivity in Z
Z_pos <- pmax(Z, 0)  # optional: truncate negative z_ij to 0
X_counts <- matrix(0, nrow = n_samples, ncol = n_features)
for (i in 1:n_samples) {
X_counts[i, ] <- rpois(n_features, lambda = size_factors[i] * Z_pos[i, ])
# X_counts[i, ] <- size_factors[i] * Z_pos[i, ]
# X_counts[i, ] <- rnorm(n_features, mean = size_factors[i] * Z_pos[i, ], sd = sqrt(size_factors[i] * Z_pos[i, ]))
}
# Annotate and wrap into Seurat object
rownames(X_counts) <- paste0("Cell", 1:n_samples)
colnames(X_counts) <- paste0("Gene", 1:n_features)
seurat_obj <- CreateSeuratObject(counts = t(X_counts))  # Seurat expects genes x cells
# ----- Run CSCORE -----
CSCORE_result <- CSCORE(seurat_obj)
cor_CSCORE <- CSCORE_result$est
corrplot(cor_CSCORE[1:100, 1:100])
cor_CSCORE[1:10, 1:10]
